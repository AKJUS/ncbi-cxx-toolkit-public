#ifndef FEATURE_INDEXER__HPP
#define FEATURE_INDEXER__HPP

/*
* ===========================================================================
*
*                            PUBLIC DOMAIN NOTICE
*               National Center for Biotechnology Information
*
*  This software/database is a "United States Government Work" under the
*  terms of the United States Copyright Act.  It was written as part of
*  the author's official duties as a United States Government employee and
*  thus cannot be copyrighted.  This software/database is freely available
*  to the public for use. The National Library of Medicine and the U.S.
*  Government have not placed any restriction on its use or reproduction.
*
*  Although all reasonable efforts have been taken to ensure the accuracy
*  and reliability of the software and data, the NLM and the U.S.
*  Government do not and cannot warrant the performance or results that
*  may be obtained by using this software or data. The NLM and the U.S.
*  Government disclaim all warranties, express or implied, including
*  warranties of performance, merchantability or fitness for any particular
*  purpose.
*
*  Please cite the author in any work or product based on this material.
*
* ===========================================================================
*
* Author:  Jonathan Kans
*
*/

#include <objects/seq/MolInfo.hpp>
#include <objects/seq/Seq_descr.hpp>
#include <objects/seqfeat/BioSource.hpp>
// #include <objects/submit/Seq_submit.hpp>
// #include <objects/submit/Submit_block.hpp>
#include <objmgr/object_manager.hpp>
#include <objmgr/seq_entry_handle.hpp>
#include <objmgr/util/feature.hpp>

BEGIN_NCBI_SCOPE
BEGIN_SCOPE(objects)


// look-ahead class names
class CSeqEntryIndex;
class CBioseqIndex;
class CDescriptorIndex;
class CFeatureIndex;

// CSeqEntryIndex
//
// CSeqEntryIndex is the master, top-level Seq-entry exploration organizer.  A variable
// is created, with optional control flags, then initialized with the top-level object:
//
//   CSeqEntryIndex idx(CSeqEntryIndex::fSkipRemoteFeatures);
//   idx.Initialize(*m_entry);
//
// A Seq-entry wrapper is created if the top-level object is a Bioseq or Bioseq-set.
// Bioseqs within the Seq-entry are then indexed and added to a vector of CBioseqIndex.
//
// The CBioseqIndex for the desired Bioseq is found with FindBioseq (given an accession),
// or with FirstBioseq or NthBioseq, or by exploring with IterateBioseqs:
//
//   idx.FindBioseq("U54469", [this](CBioseqIndex& bsx) {
//       ...
//   });
//
// and then used as the focus for subsequent Bioseq-specific operations.  In addition to
// executing the statements, FindBioseq returns true if the Bioseq was found.
//
// The interior indexing objects (CBioseqIndex, CDescriptorIndex, and CFeatureIndex) are
// generated by the indexing process, and should not be created manually.
class NCBI_XOBJUTIL_EXPORT CSeqEntryIndex : public CObject
{
    friend class CBioseqIndex;
public:

    enum EFlags {
        // general policy flags to use for all records
        fSkipRemoteFeatures = 1 << 1
    };

    typedef unsigned int TFlags; // binary OR of "EFlags"

public:
    // Constructor
    CSeqEntryIndex (TFlags flags = 0);

    // Destructor
    ~CSeqEntryIndex (void);

private:
    // Prohibit copy constructor & assignment operator
    CSeqEntryIndex (const CSeqEntryIndex&);
    CSeqEntryIndex& operator= (const CSeqEntryIndex&);

public:
    // Initializers take the top-level object
    void Initialize (CSeq_entry& topsep);
    void Initialize (CBioseq_set& seqset);
    void Initialize (CBioseq& bioseq);
    /*
    void Initialize (CSeq_submit& submit);
    */

    // Specialized initializers for streaming through release files, one component at a time
    // Submit-block obtained from top of Seq-submit release file
    /*
    void Initialize (CSeq_entry& topsep, CSubmit_block &sblock);
    */
    // Seq-descr chain obtained from top of Bioseq_set release file
    void Initialize (CSeq_entry& topsep, CSeq_descr &descr);

    // Bioseq exploration iterator
    template<typename _Pred> int IterateBioseqs (_Pred m);
    // Find Bioseq index by position
    template<typename _Pred> bool FirstBioseq (_Pred m);
    template<typename _Pred> bool NthBioseq (int n, _Pred m);
    // Find Bioseq index by accession
    template<typename _Pred> bool FindBioseq (string& accn, _Pred m);

    // Getters
    CRef<CObjectManager> GetObjectManager (void) const { return m_objmgr; }
    CRef<CScope> GetScope (void) const { return m_scope; }
    CSeq_entry_Handle GetTopSEH (void) const { return m_topSEH; }
    CConstRef<CSeq_entry> GetTopSEP (void) const { return m_topSEP; }
    /*
    CConstRef<CSubmit_block> GetSbtBlk (void) const { return m_sbtBlk; }
    */
    CConstRef<CSeq_descr> GetTopDescr (void) const { return m_topDescr; }

    // Flag to indicate failure to fetch remote sequence components or feature annotation
    bool IsFetchFailure (void) const { return m_fetchFailure; }

private:
    // Common initialization function
    void x_Init (void);

    // Populate vector of index objects for Bioseqs in Seq-entry
    void BspInSep (const CSeq_entry& sep);

private:
    CRef<CObjectManager> m_objmgr;
    CRef<CScope> m_scope;
    CSeq_entry_Handle m_topSEH;

    CConstRef<CSeq_entry> m_topSEP;
    /*
    CConstRef<CSubmit_block> m_sbtBlk;
    */
    CConstRef<CSeq_descr> m_topDescr;

    bool m_fetchFailure;

    TFlags m_flags;

    vector<CRef<CBioseqIndex>> m_bsxList;

    typedef map<string, CRef<CBioseqIndex> > TAccnIndexMap;
    TAccnIndexMap m_accnIndexMap;
};


// CBioseqIndex
//
// CBioseqIndex is the exploration organizer for a given Bioseq.  It provides methods to
// obtain descriptors and iterate through features that apply to the Bioseq.  (These are
// stored in vectors, which are initialized upon first request.)
//
// CBioseqIndex also maintains a CFeatTree for each Bioseq, used to find the best gene
// for each feature.
//
// Prior to feature iteration on a given Bioseq, InitializeFeatures can be used to explicitly
// restrict feature collection to a specified sequence subrange, either on the forward strand
// or on the reverse complement, remapping to the indicated location.
//
// Descriptors can be explored with:
//
//   bsx.IterateDescriptors([this](CDescriptorIndex& sdx) {
//       ...
//   });
//
// starting with descriptors packaged on the Bioseq, then on its parent Bioseq-set, etc.
//
// Features are explored with:
//
//   bsx.IterateFeatures([this](CFeatureIndex& sfx) {
//       ...
//   });
//
// and far fetching uses SAnnotSelector adaptive depth unless explicitly overridden.
class NCBI_XOBJUTIL_EXPORT CBioseqIndex : public CObject
{
    friend class CSeqEntryIndex;
    friend class CDescriptorIndex;
    friend class CFeatureIndex;

public:
    // Constructor
    CBioseqIndex (CBioseq_Handle bsh, const CBioseq& bsp, CSeqEntryIndex& enx);

    // Destructor
    ~CBioseqIndex (void);

private:
    // Prohibit copy constructor & assignment operator
    CBioseqIndex (const CBioseqIndex&);
    CBioseqIndex& operator= (const CBioseqIndex&);

public:
    // Limit features to subrange, forward strand or reverse complement
    void InitializeFeatures (int from, int to, bool rev_comp);
    void InitializeFeatures (const CSeq_loc& loc);

    // Descriptor and feature exploration iterators
    template<typename _Pred> int IterateDescriptors (_Pred m);
    template<typename _Pred> int IterateFeatures (_Pred m);

    // Getters
    CBioseq_Handle GetBioseqHandle (void) const { return m_bsh; }
    const CBioseq& GetBioseq (void) const { return m_bsp; }
    CSeqEntryIndex& GetSeqEntryIndex (void) const { return m_enx; }
    CRef<CScope> GetScope (void) const { return m_scope; }
    feature::CFeatTree& GetFeatTree (void) { return m_featTree; }

    // Seq-id field
    const string& GetAccession (void) const { return m_Accession; }

    // Seq-inst fields
    bool IsNA (void) const {  return m_IsNA; }
    bool IsAA (void) const { return m_IsAA; }
    CSeq_inst::TTopology GetTopology (void) const { return m_topology; }

    bool IsDelta (void) const { return m_IsDelta; }
    bool IsVirtual (void) const { return m_IsVirtual; }
    bool IsMap (void) const { return m_IsMap; }

    // Most important descriptor fields
    const string& GetTitle (void) const { return m_title; }

    CConstRef<CMolInfo> GetMolInfo (void) const { return m_molInfo; }
    CMolInfo::TBiomol GetBiomol (void) const { return m_biomol; }
    CMolInfo::TTech GetTech (void) const { return m_tech; }
    CMolInfo::TCompleteness GetCompleteness (void) const { return m_completeness; }

    CConstRef<CBioSource> GetBioSource (void) const { return m_bioSource; }

private:
    // Common object collection functions, delayed until actually needed
    void x_InitDescs (void);
    void x_InitFeats (void);

    // Internal mapper
    CRef<CFeatureIndex> GetFeatIndex (CMappedFeat mf);

private:
    CBioseq_Handle m_bsh;
    const CBioseq& m_bsp;
    CSeqEntryIndex& m_enx;
    CRef<CScope> m_scope;

    bool m_descsInitialized;
    vector<CRef<CDescriptorIndex>> m_sdxList;

    bool m_featsInitialized;
    vector<CRef<CFeatureIndex>> m_sfxList;
    feature::CFeatTree m_featTree;

    typedef map<CMappedFeat, CRef<CFeatureIndex> > TFeatIndexMap;
    TFeatIndexMap m_featIndexMap;

private:
    // Seq-id field
    string m_Accession;

    // Seq-inst fields
    bool m_IsNA;
    bool m_IsAA;
    CSeq_inst::TTopology m_topology;

    bool m_IsDelta;
    bool m_IsVirtual;
    bool m_IsMap;

    // Instantiated title
    string m_title;

    // MolInfo fields
    CConstRef<CMolInfo> m_molInfo;
    CMolInfo::TBiomol m_biomol;
    CMolInfo::TTech m_tech;
    CMolInfo::TCompleteness m_completeness;

    // BioSource fields
    CConstRef<CBioSource> m_bioSource;

    // User object fields
    bool m_forceOnlyNearFeats;

    // Derived policy flags
    bool m_onlyNearFeats;
};



// CDescriptorIndex
//
// CDescriptorIndex stores information about an indexed descriptor
class NCBI_XOBJUTIL_EXPORT CDescriptorIndex : public CObject
{
    friend class CBioseqIndex;
public:
    // Constructor
    CDescriptorIndex (const CSeqdesc& sd, CBioseqIndex& bsx);

    // Destructor
    ~CDescriptorIndex (void);

private:
    // Prohibit copy constructor & assignment operator
    CDescriptorIndex (const CDescriptorIndex&);
    CDescriptorIndex& operator= (const CDescriptorIndex&);

public:
    // Getters
    const CSeqdesc& GetSeqDesc (void) const { return m_sd; }
    CBioseqIndex& GetBioseqIndex (void) const { return m_bsx; }

    // Get descriptor subtype (e.g., CSeqdesc::e_Molinfo)
    CSeqdesc::E_Choice GetSubtype (void) const { return m_subtype; }

private:
    // Common initialization function
    void x_Init (void);

private:
    const CSeqdesc& m_sd;
    CBioseqIndex& m_bsx;

    CSeqdesc::E_Choice m_subtype;
};



// CFeatureIndex
//
// CFeatureIndex stores information about an indexed feature
//
// GetBestGene returns the best (referenced or overlapping) gene, if available
//
//   sfx.GetBestGene([this](CFeatureIndex& gnx) {
//       ...
//   });
//
class NCBI_XOBJUTIL_EXPORT CFeatureIndex : public CObject
{
    friend class CBioseqIndex;
public:
    // Constructor
    CFeatureIndex (CSeq_feat_Handle sfh, const CMappedFeat mf, CBioseqIndex& bsx);

    // Destructor
    ~CFeatureIndex (void);

private:
    // Prohibit copy constructor & assignment operator
    CFeatureIndex (const CFeatureIndex&);
    CFeatureIndex& operator= (const CFeatureIndex&);

public:
    // Getters
    CSeq_feat_Handle GetSeqFeatHandle (void) const { return m_sfh; }
    const CMappedFeat GetMappedFeat (void) const { return m_mf; }
    CBioseqIndex& GetBioseqIndex (void) const { return m_bsx; }

    // Get feature subtype (e.g. CSeqFeatData::eSubtype_mrna)
    CSeqFeatData::ESubtype GetSubtype (void) const { return m_subtype; }

    // Find index object for best gene using internal CFeatTree
    template<typename _Pred> bool GetBestGene (_Pred m);

private:
    // Common initialization function
    void x_Init (void);

private:
    CSeq_feat_Handle m_sfh;
    const CMappedFeat m_mf;
    CBioseqIndex& m_bsx;

    CSeqFeatData::ESubtype m_subtype;
};


END_SCOPE(objects)
END_NCBI_SCOPE

#endif  /* FEATURE_INDEXER__HPP */
